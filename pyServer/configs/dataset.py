question1 = 'Build a red box/cube'
answer1 = '<m-cube color="red" y="2"></m-cube>'

question2 = 'Build a blue sphere'
answer2 = '<m-sphere color="blue" y="2"></m-sphere>'

question3 = 'Build a tall green cylinder'
answer3 = '<m-cylinder color="green" y="4"></m-cylinder>'

question4 = 'Build a yellow plane'
answer4 = '<m-plane color="yellow" y="2"></m-plane>'

question5 = 'Set up a spotlight'
answer5 = '<m-light    type="spotlight"    ry="45"    rx="65"    rz="-45"    x="10"    y="10"    z="10"></m-light>'

question6 = 'Build a basic scene with simple models in it'
answer6 = '<m-model x="-2" collide="true" src="https://public.mml.io/damaged-helmet.glb" z="-2" y="1.2" sx="0.5" sy="0.5" sz="0.5"></m-model><m-cube id="clickable-cube" y="1" color="red" collide="true" z="-2"></m-cube><m-model x="2" z="-2" id="duck" hidden-from="2" src="https://public.mml.io/duck.glb" y="0.37872010769124587" collide="true"></m-model><m-cube id="color-cube" x="4" y="1" width="1" color="green" collide="true" z="-2" castshadow="true"></m-cube><script>  const clickableCube = document.getElementById("clickable-cube");  clickableCube.addEventListener("click", () => {    clickableCube.setAttribute("color", `#${Math.floor(Math.random() * 16777215).toString(16)}`);  });  const duck = document.getElementById("duck");  if (duck) {    setInterval(() => {      duck.setAttribute("ry", (new Date().getTime() / 5) % 360);    }, 100);  }</script>'

question7 = 'Build a dice which rolls itself with complex animations when clicked'
answer7 = '<m-model  id="dice"  src="https://public.mml.io/dice.glb"  sx="1"  sy="1"  sz="1"  y="1"  rx="0"  ry="0"  rz="0"  onclick="rollDice()"></m-model><script>  function lerp(start, end, t) {    return start * (1 - t) + end * t;  }  function radToDeg(radians) {    return radians * (180 / Math.PI);  }  let rollResult = 1;  function rollDice() {    const rollMap = {      1: {        rx: radToDeg(2 * Math.PI),        ry: 0,        rz: radToDeg(2 * Math.PI),      },      2: {        rx: radToDeg(2 * Math.PI),        ry: 0,        rz: radToDeg(2 * Math.PI - Math.PI / 2),      },      3: {        rx: radToDeg(2 * Math.PI - Math.PI / 2),        ry: 0,        rz: radToDeg(2 * Math.PI),      },      4: {        rx: radToDeg(2 * Math.PI + Math.PI / 2),        ry: 0,        rz: radToDeg(2 * Math.PI),      },      5: {        rx: radToDeg(2 * Math.PI),        ry: 0,        rz: radToDeg(2 * Math.PI + Math.PI / 2),      },      6: {        rx: radToDeg(2 * Math.PI + Math.PI),        ry: 0,        rz: radToDeg(2 * Math.PI),      },    };    const diceElement = document.getElementById("dice");    let newRoll = Math.floor(Math.random() * 6) + 1;    while (newRoll === rollResult) {      newRoll = Math.floor(Math.random() * 6) + 1;    }    rollResult = newRoll;    const targetRotation = rollMap[rollResult];    const startRotation = {      rx: parseFloat(diceElement.getAttribute("rx")),      ry: parseFloat(diceElement.getAttribute("ry")),      rz: parseFloat(diceElement.getAttribute("rz")),    };    const animationTime = 400;    const interval = 40;    let currentTime = 0;    let intervalId = setInterval(() => {      currentTime += interval;      if (currentTime < animationTime) {        let t = currentTime / animationTime;        let currentRotation = {          rx: lerp(startRotation.rx, targetRotation.rx, t),          ry: lerp(startRotation.ry, targetRotation.ry, t),          rz: lerp(startRotation.rz, targetRotation.rz, t),        };        diceElement.setAttribute("rx", currentRotation.rx.toString());        diceElement.setAttribute("ry", currentRotation.ry.toString());        diceElement.setAttribute("rz", currentRotation.rz.toString());        diceElement.setAttribute("y", Math.cos(t * 2.0 - 0.5) * 3.5);      } else {        diceElement.setAttribute("rx", targetRotation.rx.toString());        diceElement.setAttribute("ry", targetRotation.ry.toString());        diceElement.setAttribute("rz", targetRotation.rz.toString());        clearInterval(intervalId);      }    }, interval);  }</script>'

question8 = ' Build a videoplayer, with a pause and unpause button, and features such as resume, restart and enable.'
answer8 = '<m-group sx="0.4" sy="0.4" ry="90"> <m-video   z="3"   y="7"   width="25"   rx="0"   ry="0"   start-time="0"   loop="true"   src="https://public.mml.io/charge.mp4" >   <m-label     onclick="restart(event.currentTarget.parentNode)"     content="restart"     x="10"     y="-6"     font-size="100"     width="4.5"     alignment="center"     height="1.5"     color="#cccccc"   ></m-label>   <m-label     onclick="pause(event.currentTarget.parentNode)"     content="pause"     x="-10"     y="-6"     font-size="100"     width="4.5"     alignment="center"     height="1.5"     color="#cccccc"   ></m-label>   <m-label     onclick="unpause(event.currentTarget.parentNode)"     content="unpause"     x="-5"     y="-6"     font-size="100"     width="4.5"     alignment="center"     height="1.5"     color="#cccccc"   ></m-label>   <m-label     onclick="resume(event.currentTarget.parentNode)"     content="resume"     x="5"     y="-6"     font-size="100"     width="4.5"     alignment="center"     height="1.5"     color="#cccccc"   ></m-label>   <m-label     onclick="toggleEnabled(event.currentTarget.parentNode)"     content="enable"     x="0"     y="-6"     font-size="100"     width="4.5"     alignment="center"     height="1.5"     color="#cccccc"   ></m-label>   <m-label     class="attributes-label"     content="attrs:"     x="0"     y="6.5"     padding="20"     font-size="50"     width="25"     alignment="center"     height="2"     color="green"     font-color="white"   ></m-label> </m-video>/m-group>script> function updateAttributesLabel(videoTag) {   const attributes = [];   for (const attr of videoTag.getAttributeNames()) {     const val = videoTag.getAttribute(attr);     attributes.push(`${attr}="${val}"`);   }   const attributesLabel = videoTag.querySelector(".attributes-label");   if (attributesLabel) {     attributesLabel.setAttribute("content", `<m-video ${attributes.join(" ")}></m-video>`);   }  function restart(videoTag) {   videoTag.setAttribute("pause-time", document.timeline.currentTime);   videoTag.setAttribute("start-time", document.timeline.currentTime);   videoTag.removeAttribute("pause-time");   updateAttributesLabel(videoTag);  function toggleEnabled(videoTag) {   const enabled = videoTag.getAttribute("enabled") !== "false";   videoTag.setAttribute("enabled", (!enabled).toString());   updateAttributesLabel(videoTag);  function pause(videoTag) {   videoTag.setAttribute("pause-time", document.timeline.currentTime);   updateAttributesLabel(videoTag);  function unpause(videoTag) {   videoTag.removeAttribute("pause-time");   updateAttributesLabel(videoTag);  function resume(videoTag) {   if (!videoTag.hasAttribute("pause-time")) return;   const startTime = parseFloat(videoTag.getAttribute("start-time")) || 0;   const pauseTime = parseFloat(videoTag.getAttribute("pause-time")) || 0;   const playedDuration = pauseTime - startTime;   const newStartTime = document.timeline.currentTime - playedDuration;   videoTag.removeAttribute("pause-time");   videoTag.setAttribute("start-time", newStartTime);   updateAttributesLabel(videoTag);  for (const video of document.querySelectorAll("m-video")) {   updateAttributesLabel(video); }/script>'

question9 = 'Build a lightgrey functioning clock, with black hour/minute hands and a red second hand.'
answer9 = '<m-group y="4">  <m-cylinder color="lightgrey" radius="4" height="0.1" rx="90"></m-cylinder>  <m-group id="hour" rz="0" z="0.1">    <m-cube sx="0.14" sy="1.2" sz="0.08" z="0.04" color="#000000" y="0.2"></m-cube>  </m-group>  <m-group id="minute" rz="0" z="0.11">    <m-cube sx="0.1" sy="2.4" sz="0.08" z="0.04" color="#000000" y="0.3"></m-cube>  </m-group>  <m-group id="second" rz="0" z="0.12">    <m-cube sx="0.08" sy="3.2" sz="0.08" z="0.04" color="#ff0000" y="0.8"></m-cube>  </m-group></m-group><script>  function setTime() {    const d = new Date();    document.getElementById("hour").setAttribute("rz", (d.getHours() / 12) * -360);    document.getElementById("minute").setAttribute("rz", (d.getMinutes() / 60) * -360);    document.getElementById("second").setAttribute("rz", (d.getSeconds() / 60) * -360);  }  setTime();  setInterval(setTime, 1000); // update every second</script>'

questions = [question1,question2,question3,question4,question5,question6,question7,question8, question9]
answers = [answer1,answer2,answer3,answer4,answer5,answer6,answer7,answer8, answer9]